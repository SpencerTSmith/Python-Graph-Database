# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import src.generated.graph_service_pb2 as graph__service__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in graph_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GraphServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddVertex = channel.unary_unary(
                '/graphdb.GraphService/AddVertex',
                request_serializer=graph__service__pb2.AddVertexRequest.SerializeToString,
                response_deserializer=graph__service__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.RemoveVertex = channel.unary_unary(
                '/graphdb.GraphService/RemoveVertex',
                request_serializer=graph__service__pb2.VertexRequest.SerializeToString,
                response_deserializer=graph__service__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.HasVertex = channel.unary_unary(
                '/graphdb.GraphService/HasVertex',
                request_serializer=graph__service__pb2.VertexRequest.SerializeToString,
                response_deserializer=graph__service__pb2.BooleanResponse.FromString,
                _registered_method=True)
        self.GetAllVertices = channel.unary_unary(
                '/graphdb.GraphService/GetAllVertices',
                request_serializer=graph__service__pb2.EmptyRequest.SerializeToString,
                response_deserializer=graph__service__pb2.VertexListResponse.FromString,
                _registered_method=True)
        self.AddEdge = channel.unary_unary(
                '/graphdb.GraphService/AddEdge',
                request_serializer=graph__service__pb2.AddEdgeRequest.SerializeToString,
                response_deserializer=graph__service__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.RemoveEdge = channel.unary_unary(
                '/graphdb.GraphService/RemoveEdge',
                request_serializer=graph__service__pb2.EdgeRequest.SerializeToString,
                response_deserializer=graph__service__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.HasEdge = channel.unary_unary(
                '/graphdb.GraphService/HasEdge',
                request_serializer=graph__service__pb2.EdgeRequest.SerializeToString,
                response_deserializer=graph__service__pb2.BooleanResponse.FromString,
                _registered_method=True)
        self.GetNeighbors = channel.unary_unary(
                '/graphdb.GraphService/GetNeighbors',
                request_serializer=graph__service__pb2.VertexRequest.SerializeToString,
                response_deserializer=graph__service__pb2.VertexListResponse.FromString,
                _registered_method=True)
        self.GetShortestPath = channel.unary_unary(
                '/graphdb.GraphService/GetShortestPath',
                request_serializer=graph__service__pb2.PathRequest.SerializeToString,
                response_deserializer=graph__service__pb2.PathResponse.FromString,
                _registered_method=True)
        self.ExecuteCommands = channel.unary_unary(
                '/graphdb.GraphService/ExecuteCommands',
                request_serializer=graph__service__pb2.CommandsRequest.SerializeToString,
                response_deserializer=graph__service__pb2.CommandsResponse.FromString,
                _registered_method=True)


class GraphServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddVertex(self, request, context):
        """Vertex operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveVertex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasVertex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllVertices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddEdge(self, request, context):
        """Edge operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveEdge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasEdge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNeighbors(self, request, context):
        """Neighborhood operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetShortestPath(self, request, context):
        """Path operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteCommands(self, request, context):
        """Additional operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GraphServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddVertex': grpc.unary_unary_rpc_method_handler(
                    servicer.AddVertex,
                    request_deserializer=graph__service__pb2.AddVertexRequest.FromString,
                    response_serializer=graph__service__pb2.OperationResponse.SerializeToString,
            ),
            'RemoveVertex': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveVertex,
                    request_deserializer=graph__service__pb2.VertexRequest.FromString,
                    response_serializer=graph__service__pb2.OperationResponse.SerializeToString,
            ),
            'HasVertex': grpc.unary_unary_rpc_method_handler(
                    servicer.HasVertex,
                    request_deserializer=graph__service__pb2.VertexRequest.FromString,
                    response_serializer=graph__service__pb2.BooleanResponse.SerializeToString,
            ),
            'GetAllVertices': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllVertices,
                    request_deserializer=graph__service__pb2.EmptyRequest.FromString,
                    response_serializer=graph__service__pb2.VertexListResponse.SerializeToString,
            ),
            'AddEdge': grpc.unary_unary_rpc_method_handler(
                    servicer.AddEdge,
                    request_deserializer=graph__service__pb2.AddEdgeRequest.FromString,
                    response_serializer=graph__service__pb2.OperationResponse.SerializeToString,
            ),
            'RemoveEdge': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveEdge,
                    request_deserializer=graph__service__pb2.EdgeRequest.FromString,
                    response_serializer=graph__service__pb2.OperationResponse.SerializeToString,
            ),
            'HasEdge': grpc.unary_unary_rpc_method_handler(
                    servicer.HasEdge,
                    request_deserializer=graph__service__pb2.EdgeRequest.FromString,
                    response_serializer=graph__service__pb2.BooleanResponse.SerializeToString,
            ),
            'GetNeighbors': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNeighbors,
                    request_deserializer=graph__service__pb2.VertexRequest.FromString,
                    response_serializer=graph__service__pb2.VertexListResponse.SerializeToString,
            ),
            'GetShortestPath': grpc.unary_unary_rpc_method_handler(
                    servicer.GetShortestPath,
                    request_deserializer=graph__service__pb2.PathRequest.FromString,
                    response_serializer=graph__service__pb2.PathResponse.SerializeToString,
            ),
            'ExecuteCommands': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteCommands,
                    request_deserializer=graph__service__pb2.CommandsRequest.FromString,
                    response_serializer=graph__service__pb2.CommandsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'graphdb.GraphService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('graphdb.GraphService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GraphService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddVertex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/graphdb.GraphService/AddVertex',
            graph__service__pb2.AddVertexRequest.SerializeToString,
            graph__service__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveVertex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/graphdb.GraphService/RemoveVertex',
            graph__service__pb2.VertexRequest.SerializeToString,
            graph__service__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HasVertex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/graphdb.GraphService/HasVertex',
            graph__service__pb2.VertexRequest.SerializeToString,
            graph__service__pb2.BooleanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllVertices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/graphdb.GraphService/GetAllVertices',
            graph__service__pb2.EmptyRequest.SerializeToString,
            graph__service__pb2.VertexListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddEdge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/graphdb.GraphService/AddEdge',
            graph__service__pb2.AddEdgeRequest.SerializeToString,
            graph__service__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveEdge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/graphdb.GraphService/RemoveEdge',
            graph__service__pb2.EdgeRequest.SerializeToString,
            graph__service__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HasEdge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/graphdb.GraphService/HasEdge',
            graph__service__pb2.EdgeRequest.SerializeToString,
            graph__service__pb2.BooleanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNeighbors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/graphdb.GraphService/GetNeighbors',
            graph__service__pb2.VertexRequest.SerializeToString,
            graph__service__pb2.VertexListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetShortestPath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/graphdb.GraphService/GetShortestPath',
            graph__service__pb2.PathRequest.SerializeToString,
            graph__service__pb2.PathResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteCommands(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/graphdb.GraphService/ExecuteCommands',
            graph__service__pb2.CommandsRequest.SerializeToString,
            graph__service__pb2.CommandsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
